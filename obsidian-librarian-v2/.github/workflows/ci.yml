name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  RUST_VERSION: "1.75"
  PYTHON_VERSION: "3.11"

jobs:
  lint-rust:
    name: Lint Rust
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust-core -> target
      
      - name: Check formatting
        run: |
          cd rust-core
          cargo fmt -- --check
      
      - name: Run Clippy
        run: |
          cd rust-core
          cargo clippy --all-targets --all-features -- -D warnings

  test-rust:
    name: Test Rust
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust-core -> target
      
      - name: Run tests
        run: |
          cd rust-core
          cargo test --all-features
      
      - name: Run benchmarks (check only)
        run: |
          cd rust-core
          cargo bench --no-run

  lint-python:
    name: Lint Python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          cd python
          pip install --upgrade pip
          pip install black isort flake8 mypy
      
      - name: Check formatting with Black
        run: |
          cd python
          black --check obsidian_librarian/
      
      - name: Check imports with isort
        run: |
          cd python
          isort --check-only obsidian_librarian/
      
      - name: Lint with flake8
        run: |
          cd python
          flake8 obsidian_librarian/
      
      - name: Type check with mypy
        run: |
          cd python
          mypy obsidian_librarian/

  test-python:
    name: Test Python
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust-core -> target
      
      - name: Install maturin
        run: pip install maturin
      
      - name: Build and install package
        run: |
          cd python
          maturin develop --release
      
      - name: Install test dependencies
        run: |
          cd python
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run tests
        run: |
          cd python
          pytest tests/ -v --cov=obsidian_librarian --cov-report=xml
      
      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./python/coverage.xml
          flags: python

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-rust, test-python]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install maturin
          cd python
          maturin develop --release
          pip install pytest pytest-asyncio
      
      - name: Run integration tests
        run: |
          cd python
          pytest tests/integration/ -v -m integration

  build-wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Install maturin
        run: pip install maturin
      
      - name: Build wheels
        run: |
          cd python
          maturin build --release
      
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}
          path: python/target/wheels/

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install mkdocs mkdocs-material mkdocstrings[python]
      
      - name: Build docs
        run: |
          mkdocs build
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site